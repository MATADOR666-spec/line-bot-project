import os
import requests
from datetime import datetime
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageMessage
import pytz
import base64

# ===== LINE Bot Config =====
CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
BANGKOK_TZ = pytz.timezone("Asia/Bangkok")

if not CHANNEL_ACCESS_TOKEN or not CHANNEL_SECRET:
    raise ValueError("Missing LINE_CHANNEL_ACCESS_TOKEN or LINE_CHANNEL_SECRET")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

app = Flask(__name__)

# ===== Google Apps Script Config =====
APPS_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbwHNNOqy2QPycsroR_soj1JQeiENC-AtxMDLtJiAiLoj9g6T22qOBtk9j9nCq34Lprjxw/exec"
SECRET_CODE = "my_secret_code"
ADMIN_PASS = "8264"

# ===== ‡πÄ‡∏Å‡πá‡∏ö state =====
user_states = {}

# ===== Helper =====
def get_profile_from_sheets(user_id):
    try:
        payload = {"secret": SECRET_CODE, "action": "getProfile", "userId": user_id}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def save_profile_to_sheets(profile_data):
    try:
        payload = {"secret": SECRET_CODE, "action": "addProfile", **profile_data}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def get_all_profiles():
    try:
        payload = {"secret": SECRET_CODE, "action": "getAllProfiles"}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def is_holiday(today_date):
    try:
        payload = {"secret": SECRET_CODE, "action": "isHoliday", "date": today_date}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json().get("isHoliday", False)
    except Exception as e:
        return False

def save_duty_log(log_data):
    try:
        payload = {"secret": SECRET_CODE, "action": "addDutyLog", **log_data}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

def check_duty_log(room, date):
    try:
        payload = {"secret": SECRET_CODE, "action": "checkDutyLog", "‡∏´‡πâ‡∏≠‡∏á": room, "date": date}
        r = requests.post(APPS_SCRIPT_URL, json=payload, timeout=10)
        return r.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

# ===== ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏£ =====
def send_duty_reminder():
    today = datetime.now(BANGKOK_TZ)
    today_name = today.strftime("%A")
    today_thai = {
        "Monday": "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "Tuesday": "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "Wednesday": "‡∏û‡∏∏‡∏ò",
        "Thursday": "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "Friday": "‡∏®‡∏∏‡∏Å‡∏£‡πå",
        "Saturday": "‡πÄ‡∏™‡∏≤‡∏£‡πå", "Sunday": "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"
    }[today_name]

    today_date = today.strftime("%Y-%m-%d")

    if today_name in ["Saturday", "Sunday"] or is_holiday(today_date):
        return

    data = get_all_profiles()
    if not data.get("ok"):
        return

    for p in data["profiles"]:
        if str(p.get("‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô", "")).strip() == today_thai:
            user_id = p["userId"]
            msg = f"üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô{today_thai}\n‡∏ä‡∏∑‡πà‡∏≠: {p.get('‡∏ä‡∏∑‡πà‡∏≠')}\n‡∏´‡πâ‡∏≠‡∏á: {p.get('‡∏´‡πâ‡∏≠‡∏á')}"
            try:
                line_bot_api.push_message(user_id, TextSendMessage(text=msg))
            except Exception as e:
                print("ERROR push:", e)

@app.route("/run-reminder", methods=["GET"])
def run_reminder():
    send_duty_reminder()
    return "Reminder sent", 200

# ===== ‡∏ï‡∏£‡∏ß‡∏à 17:00 ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô =====
def check_missing_evidence():
    today = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
    today_name = datetime.now(BANGKOK_TZ).strftime("%A")
    today_thai = {"Monday":"‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","Tuesday":"‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","Wednesday":"‡∏û‡∏∏‡∏ò","Thursday":"‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","Friday":"‡∏®‡∏∏‡∏Å‡∏£‡πå"}.get(today_name)
    if not today_thai: return

    data = get_all_profiles()
    if not data.get("ok"): return

    for p in data["profiles"]:
        if str(p.get("‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô")) == today_thai:
            r = check_duty_log(p["‡∏´‡πâ‡∏≠‡∏á"], today)
            if not r.get("found"):
                for t in data["profiles"]:
                    if t.get("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó") == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå" and str(t.get("‡∏´‡πâ‡∏≠‡∏á")) == str(p["‡∏´‡πâ‡∏≠‡∏á"]):
                        line_bot_api.push_message(t["userId"], TextSendMessage(
                            text=f"‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á {p['‡∏´‡πâ‡∏≠‡∏á']} ‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô{today_thai} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô"
                        ))

@app.route("/run-check-evidence", methods=["GET"])
def run_check_evidence():
    check_missing_evidence()
    return "Check complete", 200

# ===== Routes =====
@app.route("/", methods=["GET"])
def home():
    return "ok", 200

@app.route("/webhook", methods=["POST","GET"])
def webhook():
    if request.method == "GET": return "Webhook OK", 200
    signature = request.headers.get("X-Line-Signature","")
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK", 200

# ===== Handle Messages =====
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = (event.message.text or "").strip()

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
    if text == "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå":
        result = get_profile_from_sheets(user_id)
        if result.get("ok") and "profile" in result:
            profile = result["profile"]
            msg = f"""‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:
‡∏ä‡∏∑‡πà‡∏≠: {profile.get("‡∏ä‡∏∑‡πà‡∏≠")}
‡∏´‡πâ‡∏≠‡∏á: {profile.get("‡∏´‡πâ‡∏≠‡∏á")}
‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {profile.get("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà")}
‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô: {profile.get("‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô")}
‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {profile.get("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó")}

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏´‡∏°? (‡πÉ‡∏ä‡πà/‡πÑ‡∏°‡πà)"""
            user_states[user_id] = {
                "step": 99,
                "role": profile.get("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"),
                "data": {"userId": user_id},
                "editing": False
            }
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=msg))
        else:
            user_states[user_id] = {"step": 0, "data": {"userId": user_id}, "role": None, "editing": False}
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ (‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô):"))
        return

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ state
    if user_id in user_states:
        state = user_states[user_id]
        step = state["step"]

        # ---------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ----------
        if step == 99:
            answer = text.strip()
            if answer in ["‡πÉ‡∏ä‡πà", "Yes", "yes", "y", "Y"]:
                role = state["role"]
                state["editing"] = True
                if role == "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô":
                    state["step"] = 1
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .‡∏ò‡∏ô‡∏ä‡∏±‡∏¢ ‡∏ô‡∏±‡∏ô‡∏ó‡∏∞‡πÇ‡∏¢.):"))
                elif role == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå":
                    state["step"] = 10
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏°‡∏±‡∏ô.):"))
                elif role == "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
                    state["step"] = 21
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .‡∏ò‡∏ô‡∏ä‡∏±‡∏¢ ‡∏ô‡∏±‡∏ô‡∏ó‡∏∞‡πÇ‡∏¢.):"))
            elif answer in ["‡πÑ‡∏°‡πà", "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", "No", "no", "n", "N"]:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"))
                del user_states[user_id]
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡πÉ‡∏ä‡πà' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà'"))
            return

        # ---------- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ----------
        if step == 0:
            role = text
            if role not in ["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"]:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"))
                return
            state["role"] = role
            state["data"]["‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"] = role
            if role == "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô":
                state["step"] = 1
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .‡∏ò‡∏ô‡∏ä‡∏±‡∏¢ ‡∏ô‡∏±‡∏ô‡∏ó‡∏∞‡πÇ‡∏¢.):"))
            elif role == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå":
                state["step"] = 10
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏°‡∏±‡∏ô.):"))
            elif role == "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
                state["step"] = 20
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:"))
            return

        # ---------- ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ----------
        if state["role"] == "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô":
            if step == 1:
                state["data"]["‡∏ä‡∏∑‡πà‡∏≠"] = text
                state["step"] = 2
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡πâ‡∏≠‡∏á5/4 ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô .54.):"))
            elif step == 2:
                state["data"]["‡∏´‡πâ‡∏≠‡∏á"] = text
                state["step"] = 3
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô .8.):"))
            elif step == 3:
                state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"] = text
                state["step"] = 4
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô .‡∏û‡∏∏‡∏ò.):"))
            elif step == 4:
                state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] = text
                result = save_profile_to_sheets(state["data"])
                line_bot_api.reply_message(event.reply_token, TextSendMessage(
                    text=f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n{result}"
                ))
                del user_states[user_id]
            return

        # ---------- ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ----------
        if state["role"] == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå":
            if step == 10:
                state["data"]["‡∏ä‡∏∑‡πà‡∏≠"] = text
                state["step"] = 11
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡πâ‡∏≠‡∏á5/4 ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô .54.):"))
            elif step == 11:
                state["data"]["‡∏´‡πâ‡∏≠‡∏á"] = text
                state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"] = "-"
                state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] = "-"
                result = save_profile_to_sheets(state["data"])
                line_bot_api.reply_message(event.reply_token, TextSendMessage(
                    text=f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n{result}"
                ))
                del user_states[user_id]
            return

        # ---------- ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ----------
        if state["role"] == "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
            if step == 20:
                if text != ADMIN_PASS:
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
                    return
                state["step"] = 21
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô .‡∏ò‡∏ô‡∏ä‡∏±‡∏¢ ‡∏ô‡∏±‡∏ô‡∏ó‡∏∞‡πÇ‡∏¢.):"))
            elif step == 21:
                state["data"]["‡∏ä‡∏∑‡πà‡∏≠"] = text
                state["step"] = 22
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡πâ‡∏≠‡∏á5/4 ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô .54.):"))
            elif step == 22:
                state["data"]["‡∏´‡πâ‡∏≠‡∏á"] = text
                state["step"] = 23
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô .8.):"))
            elif step == 23:
                state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"] = text
                state["step"] = 24
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô .‡∏û‡∏∏‡∏ò.):"))
            elif step == 24:
                state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] = text
                result = save_profile_to_sheets(state["data"])
                line_bot_api.reply_message(event.reply_token, TextSendMessage(
                    text=f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n{result}"
                ))
                del user_states[user_id]
            return

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô
    if text == "‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏ß‡∏£":
        now = datetime.now(BANGKOK_TZ).strftime("%H:%M")
        if not ("00:40" <= now <= "17:00"):
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 14:40 - 17:00"))
            return

        result = get_profile_from_sheets(user_id)
        if not result.get("ok"): return
        profile = result["profile"]

       # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ role ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if profile.get("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó") not in ["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"]:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ"))
            return

        today = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
        r = check_duty_log(profile["‡∏´‡πâ‡∏≠‡∏á"], today)
        if r.get("found"):
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"))
            return

        # ‡πÄ‡∏Å‡πá‡∏ö role ‡∏î‡πâ‡∏ß‡∏¢
        user_states[user_id] = {
            "step": "evidence",
            "data": profile,
            "evidence": [],
            "role": profile.get("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"),
            "editing": False
        }

        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üì∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ 3 ‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ"))

@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    user_id = event.source.user_id
    if user_id not in user_states or user_states[user_id].get("step") != "evidence":
        return

    state = user_states[user_id]

    # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å LINE
    content = line_bot_api.get_message_content(event.message.id)
    img_data = b"".join([chunk for chunk in content.iter_content()])

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
    img_b64 = base64.b64encode(img_data).decode("utf-8")

    # ‡∏™‡πà‡∏á JSON ‡πÑ‡∏õ Apps Script
    payload = {
        "secret": SECRET_CODE,
        "action": "uploadEvidence",
        "userId": user_id,
        "fileName": f"evidence_{len(state['evidence'])+1}.jpg",
        "fileData": img_b64
    }

    try:
        res = requests.post(APPS_SCRIPT_URL, json=payload, timeout=20)
        print("üì° Upload status:", res.status_code, res.text)
        result = res.json()
    except Exception as e:
        print("‚ùå Upload error:", e)
        line_bot_api.push_message(user_id, TextSendMessage(text="‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ"))
        return

    if not result.get("ok"):
        line_bot_api.push_message(user_id, TextSendMessage(text="‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + str(result)))
        return

    # ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    state["evidence"].append(result["url"])

    # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if len(state["evidence"]) == 3:
        today = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
        log = {
            "userId": user_id,
            "‡∏´‡πâ‡∏≠‡∏á": state["data"]["‡∏´‡πâ‡∏≠‡∏á"],
            "‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô": state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"],
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": today,
            "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á": state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"],
            "URL ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà1": state["evidence"][0],
            "URL ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà2": state["evidence"][1],
            "URL ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà3": state["evidence"][2],
            "‡πÄ‡∏ß‡∏•‡∏≤": datetime.now(BANGKOK_TZ).strftime("%H:%M"),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "Submitted"
        }

        res = requests.post(APPS_SCRIPT_URL, json={"secret": SECRET_CODE, "action": "addDutyLog", **log})
        result = res.json()

        if result.get("ok"):
            line_bot_api.push_message(user_id, TextSendMessage(text="‚úÖ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß"))
        else:
            line_bot_api.push_message(user_id, TextSendMessage(text="‚ùå ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"))

        del user_states[user_id]


# ===== Run =====
if __name__ == "__main__":
    port = int(os.environ.get("PORT",8000))
    app.run(host="0.0.0.0", port=port)
