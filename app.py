import os
import requests
from flask import Flask, request, jsonify, render_template
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageMessage
from datetime import datetime, time
import pytz
import sqlite3

DB_NAME = "data.db"

def query_db(query, args=(), one=False):
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute(query, args)
    rv = cur.fetchall()
    conn.commit()
    conn.close()
    return (rv[0] if rv else None) if one else rv


# ===== LINE Config =====
CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

app = Flask(__name__)
BANGKOK_TZ = pytz.timezone("Asia/Bangkok")

# ===== Google Sheets API (Apps Script endpoint) =====
SHEET_API_URL = os.getenv("SHEET_API_URL", "https://script.google.com/macros/s/AKfycbwHNNOqy2QPycsroR_soj1JQeiENC-AtxMDLtJiAiLoj9g6T22qOBtk9j9nCq34Lprjxw/exec")
ADMIN_PASS = "8264"

# ===== Helper =====
def get_profiles():
    try:
        r = requests.get(SHEET_API_URL)
        print("status:", r.status_code)
        print("response text:", r.text)  # üëà log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ API ‡∏™‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏£‡∏¥‡∏á ‡πÜ
        if r.status_code == 200:
            return r.json().get("profiles", [])
    except Exception as e:
        print("get_profiles error:", e)
    return []


def is_holiday(date_str):
    try:
        r = requests.get(f"{SHEET_API_URL}?sheet=Holidays")
        if r.status_code != 200:
            return False
        holidays = r.json().get("data", [])
        return any(h["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] == date_str for h in holidays)
    except:
        return False

def save_profile(profile_data):
    profile_data["secret"] = "my_secret_code"  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö SECRET ‡πÉ‡∏ô Apps Script
    r = requests.post(SHEET_API_URL, json=profile_data)
    print("save_profile request:", profile_data)
    print("save_profile response:", r.text)
    return r.json()




# ===== Routes =====
@app.route("/")
def index():
    return render_template("duty_logs.html")

@app.route("/duty-logs/view")
def view_duty_logs():
    rows = query_db("SELECT * FROM duty_logs ORDER BY ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà DESC, ‡πÄ‡∏ß‡∏•‡∏≤ DESC")
    logs = [dict(r) for r in rows]
    return render_template("duty_logs.html", logs=logs)

@app.route("/schedule")
def schedule():
    return render_template("schedule.html")

# ===== Webhook =====
@app.route("/webhook", methods=["POST"])
def webhook():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    handler.handle(body, signature)
    return "OK"

# ‡πÄ‡∏Å‡πá‡∏ö state ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
user_states = {}

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()
    profiles = get_profiles()
    profile = next((p for p in profiles if p["userId"] == user_id), None)

    # ========== ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ==========
    if text == "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå":
        if profile:
            msg = f"""üìå ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
‡∏ä‡∏∑‡πà‡∏≠: {profile['‡∏ä‡∏∑‡πà‡∏≠']}
‡∏´‡πâ‡∏≠‡∏á: {profile['‡∏´‡πâ‡∏≠‡∏á']}
‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {profile['‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà']}
‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô: {profile['‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô']}
‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {profile['‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó']}

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏´‡∏°? (‡πÉ‡∏ä‡πà/‡πÑ‡∏°‡πà)"""
            user_states[user_id] = {"step": "edit_confirm", "profile": profile}
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=msg))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(
                text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‚ùå\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô):"))
            user_states[user_id] = {"step": "choose_role", "data": {"userId": user_id}}
        return

    # ========== ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ==========
    if user_id in user_states:
        state = user_states[user_id]
        step = state["step"]

        # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ---
        if step == "choose_role":
            if text not in ["‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"]:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"))
                return

            state["data"]["‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"] = text
            if text == "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô":
                state["step"] = "student_name"
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠:"))
            elif text == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå":
                state["step"] = "teacher_name"
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠:"))
            elif text == "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
                state["step"] = "admin_pass"
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:"))
            return

        # --- ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ ---
        if step == "admin_pass":
            if text != ADMIN_PASS:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
                return
            state["step"] = "student_name"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠:"))
            return

        # --- ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
        if step == "student_name":
            state["data"]["‡∏ä‡∏∑‡πà‡∏≠"] = text
            state["step"] = "student_room"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á:"))
            return

        if step == "student_room":
            state["data"]["‡∏´‡πâ‡∏≠‡∏á"] = text
            state["step"] = "student_number"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:"))
            return

        if step == "student_number":
            state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"] = text
            state["step"] = "student_dutyday"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå):"))
            return

        if step == "student_dutyday":
            state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] = text
            state["data"]["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£"] = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
            state["data"]["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Active"
            save_profile(state["data"])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"))
            del user_states[user_id]
            return

        # --- ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ---
        if step == "teacher_name":
            state["data"]["‡∏ä‡∏∑‡πà‡∏≠"] = text
            state["step"] = "teacher_room"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á:"))
            return

        if step == "teacher_room":
            state["data"]["‡∏´‡πâ‡∏≠‡∏á"] = text
            state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"] = "-"
            state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] = "-"
            state["data"]["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£"] = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
            state["data"]["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Active"
            save_profile(state["data"])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"))
            del user_states[user_id]
            return

        # --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
        if step == "edit_confirm":
            if text.lower() in ["‡πÉ‡∏ä‡πà", "yes", "y"]:
                role = state["profile"]["‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"]
                if role == "‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" or role == "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô":
                    state["step"] = "student_name"
                    state["data"] = {"userId": user_id, "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó": role}
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:"))
                elif role == "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå":
                    state["step"] = "teacher_name"
                    state["data"] = {"userId": user_id, "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó": role}
                    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:"))
            else:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"))
                del user_states[user_id]
            return
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á
    if text == "‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏ß‡∏£":
        profile = next((p for p in profiles if p["userId"] == user_id), None)
        if not profile:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô"))
            return

        today = datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d")
        today_thai = {
            "Monday": "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "Tuesday": "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "Wednesday": "‡∏û‡∏∏‡∏ò",
            "Thursday": "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "Friday": "‡∏®‡∏∏‡∏Å‡∏£‡πå"
        }.get(datetime.now(BANGKOK_TZ).strftime("%A"))

    # ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô
        if profile["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"] != today_thai:
            line_bot_api.reply_message(event.reply_token,
                TextSendMessage(text=f"‚ùå ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô {profile['‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô']})"))
            return

    # ‡πÄ‡∏ß‡∏•‡∏≤
        now = datetime.now(BANGKOK_TZ).strftime("%H:%M")
        if not ("14:40" <= now <= "17:00"):
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 14:40‚Äì17:00"))
            return

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        row = query_db("SELECT * FROM duty_logs WHERE ‡∏´‡πâ‡∏≠‡∏á=? AND ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà=?", (profile["‡∏´‡πâ‡∏≠‡∏á"], today), one=True)
        if row:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"))
            return

    # ‡πÉ‡∏´‡πâ user ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ
        user_states[user_id] = {"step": "send_evidence", "data": profile, "images": []}
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 3 ‡∏£‡∏π‡∏õ (‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏π‡∏õ)"))

@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    user_id = event.source.user_id
    if user_id not in user_states or user_states[user_id]["step"] != "send_evidence":
        return

    state = user_states[user_id]
    os.makedirs("static/uploads", exist_ok=True)

    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE
    message_content = line_bot_api.get_message_content(event.message.id)
    file_path = f"static/uploads/{event.message.id}.jpg"
    with open(file_path, "wb") as f:
        for chunk in message_content.iter_content():
            f.write(chunk)

    # gen URL
    domain = os.getenv("DOMAIN", "https://line-bot-project-hjaq.onrender.com")
    url = f"{domain}/{file_path}"
    state["images"].append(url)

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
    if len(state["images"]) < 3:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(
            text=f"üì∏ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß {len(state['images'])}/3 ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠"))
        return

    # ‡∏Ñ‡∏£‡∏ö 3 ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB
    query_db("""INSERT INTO duty_logs
        (userId, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏´‡πâ‡∏≠‡∏á, ‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô, ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á, url1, url2, url3, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
        (
            user_id,
            datetime.now(BANGKOK_TZ).strftime("%Y-%m-%d"),
            state["data"]["‡∏´‡πâ‡∏≠‡∏á"],
            state["data"]["‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô"],
            state["data"]["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"],
            state["images"][0], state["images"][1], state["images"][2],
            datetime.now(BANGKOK_TZ).strftime("%H:%M"),
            "‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
    )

    # ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
    teachers = query_db("SELECT * FROM profiles WHERE ‡∏´‡πâ‡∏≠‡∏á=? AND ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó='‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå'", (state["data"]["‡∏´‡πâ‡∏≠‡∏á"],))
    for t in teachers:
        line_bot_api.push_message(
            t["userId"],
            TextSendMessage(text=f"‚úÖ ‡∏´‡πâ‡∏≠‡∏á {state['data']['‡∏´‡πâ‡∏≠‡∏á']} ‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô{state['data']['‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô']} ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà {domain}/duty-logs/view")
        )

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß"))
    del user_states[user_id]

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)